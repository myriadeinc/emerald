'use strict';

const testing = require('../test.init.js');

const BlockReferenceService = require('src/services/block.reference.service.js');



const xmrUtil = require('cryptoforknote-util');
const multiHashing = require('cryptonight-hashing');


const MinerModel = require('src/models/miner.model.js');

const config = require('src/util/config.js');
require('chai')
  .use(require('chai-as-promised'))
  .use(require('chai-string'))
  .should();

describe('Unit test for Block Reference Service', ()=> {
  let miner;
  let job;
  let blockTemplate;

  let blockTemplateBlob = "0c0cfd8abaf005e790a70e827cc6c0ef7f6a65587b5d2096454ebbb1b5641d003917f69639d94700000000028e9f7a01ffd29e7a01efecb8bd9d3b02bd4cb966f32aba4201b821cb833955b870ae7cadaa4b1666a708bbd58a27746c2101c69e4b6be871781b8d60327b0336053a71d386bbcd3cec6c53b2c5ef6878c64e001ce3c199b5033fbd4e4c8f9a8aa62688ca7bd22b31ce0591cee67fade8fd0b5b193388b902b17e8c80c5662096295ba10a8e5dded430db383f37335568a2aaf98b5e3efb568679700f78ade4756f5a65e00d42d848b2e6ce994c16bb90e2c545725ee3ec21ab38532c7adee61cbd5a0685f994938a83705ddf757037065cd13cfc87e0d6c01c697301839bafb42acd252adc0370571bc5224f34f69f2d0e24c0982a3fc29c685cb1f54c95925012774bf8a439ff3ed4c2e9b6f7e908e5d2d2fd2f893adfd53c03f96b3c00cf00903870b85688c48f3ffef7fd23aa0412335569f8cff94c4456afa7d8c4d82870bb1720ee502de8af39a688c670abf63a4535890a4994cd2e77d581f5e8d9189af3b6083bf0a0d22955cc51058c05ece78fcb0945591043e3fbb945f73578b1ff14c25b13bdcf331fd35238db3080ae4c4a003572d6ec87f8faeb9b703984674e39797844cae3f7ca916e8fff3f4321f41d499b23cc266f5113448c66080adafaf5bbacff346529d362030ec0acfb2aa9cb87a904db7fcc99b21c8ac9f2ae11a1e31c7c257b6f761ee25581b2ea859d1f24804ac7b5eb128d4df99d5388cc85b4b5810f41c3ca51764183d1738217f5e9c007d41f31c19d8a3492bb032eebeec58fdd401296a1d683367142e2a7770efdd044b3eb49a6f261e11da6f5cbcdf35c72123f9235c3e86aff4b858d3d4d536c5906688a220fd8fe2a51a9e978e628ea587178fc1f21e7c59b231779c2e14726cae0c6bb4e67ee0c545ab7df8f85a2b8cbce3acf550f8a929802da95a81215431974a39d2bc30b0204961a067a31580b426faeff047dfb3b533a0ddee940e486f25e3f00d4d2a430b1413178017efc38dc7a90fa3a02d411f907db7e3a7edfa13996a5e0f8a2c81c179e2bb75884a6fec2244178d1a08d0defd3669ad031179f7c038c8d8315defb63b34c4286e26866b2850d969789cb81e23c76944bed9caceb90e47e78383d6bb7953b1770fdaa98dc6dcded1a82713eca7567b13324e9f49b292286b9cf3b65e904b6037ab4f2c6ba6f2ce83104ff74fea69fddebb2ec937ff6312dd6b958dbf03ed6f6c63a02e07f15e1fb352d28ea191f87f811e4aaed2269615d5ace6c7c1594ffa0cc6a0dd7bb701215cade87e960c741477b007601a8342bd8b3c4fc16f235238cbddbdf9f03ec705ac4977d339be02adff9d9a8a09e9ad445628dd9bf85fa31c406ef09c34813ce9ce301a93f6190b6bfc85541a06d05dd36";

  let powResult = "bfb73a0cb213ff409d9aad54523b525c966bee746bf0351abe6fda59395f2000";
  // before('setup', () => {
  //   miner = new MinerModel({
  //     address : "0x1",
  //     name : 'john',
  //     id : '1'
  //   })
  //   job = miner.getJob();
  // });

  it('should #buildBlock and return a blockTemplate blob', () => {
    let block = Buffer.from(blockTemplateBlob, "hex");
    const NonceBuffer = Buffer.from("7a810000", 'hex');
    let result = xmrUtil.construct_block_blob(block, NonceBuffer, 0);

    result.toString('hex').should.be.eql("0c0cfd8abaf005e790a70e827cc6c0ef7f6a65587b5d2096454ebbb1b5641d003917f69639d9477a810000028e9f7a01ffd29e7a01efecb8bd9d3b02bd4cb966f32aba4201b821cb833955b870ae7cadaa4b1666a708bbd58a27746c2101c69e4b6be871781b8d60327b0336053a71d386bbcd3cec6c53b2c5ef6878c64e001ce3c199b5033fbd4e4c8f9a8aa62688ca7bd22b31ce0591cee67fade8fd0b5b193388b902b17e8c80c5662096295ba10a8e5dded430db383f37335568a2aaf98b5e3efb568679700f78ade4756f5a65e00d42d848b2e6ce994c16bb90e2c545725ee3ec21ab38532c7adee61cbd5a0685f994938a83705ddf757037065cd13cfc87e0d6c01c697301839bafb42acd252adc0370571bc5224f34f69f2d0e24c0982a3fc29c685cb1f54c95925012774bf8a439ff3ed4c2e9b6f7e908e5d2d2fd2f893adfd53c03f96b3c00cf00903870b85688c48f3ffef7fd23aa0412335569f8cff94c4456afa7d8c4d82870bb1720ee502de8af39a688c670abf63a4535890a4994cd2e77d581f5e8d9189af3b6083bf0a0d22955cc51058c05ece78fcb0945591043e3fbb945f73578b1ff14c25b13bdcf331fd35238db3080ae4c4a003572d6ec87f8faeb9b703984674e39797844cae3f7ca916e8fff3f4321f41d499b23cc266f5113448c66080adafaf5bbacff346529d362030ec0acfb2aa9cb87a904db7fcc99b21c8ac9f2ae11a1e31c7c257b6f761ee25581b2ea859d1f24804ac7b5eb128d4df99d5388cc85b4b5810f41c3ca51764183d1738217f5e9c007d41f31c19d8a3492bb032eebeec58fdd401296a1d683367142e2a7770efdd044b3eb49a6f261e11da6f5cbcdf35c72123f9235c3e86aff4b858d3d4d536c5906688a220fd8fe2a51a9e978e628ea587178fc1f21e7c59b231779c2e14726cae0c6bb4e67ee0c545ab7df8f85a2b8cbce3acf550f8a929802da95a81215431974a39d2bc30b0204961a067a31580b426faeff047dfb3b533a0ddee940e486f25e3f00d4d2a430b1413178017efc38dc7a90fa3a02d411f907db7e3a7edfa13996a5e0f8a2c81c179e2bb75884a6fec2244178d1a08d0defd3669ad031179f7c038c8d8315defb63b34c4286e26866b2850d969789cb81e23c76944bed9caceb90e47e78383d6bb7953b1770fdaa98dc6dcded1a82713eca7567b13324e9f49b292286b9cf3b65e904b6037ab4f2c6ba6f2ce83104ff74fea69fddebb2ec937ff6312dd6b958dbf03ed6f6c63a02e07f15e1fb352d28ea191f87f811e4aaed2269615d5ace6c7c1594ffa0cc6a0dd7bb701215cade87e960c741477b007601a8342bd8b3c4fc16f235238cbddbdf9f03ec705ac4977d339be02adff9d9a8a09e9ad445628dd9bf85fa31c406ef09c34813ce9ce301a93f6190b6bfc85541a06d05dd36");

  });

  it('should compare a block and return true', () => {

    // BlockReferenceService.checkBlock(block, seed_hash, result);
 
    //let blockTemplateBlob ="0c0cbf88baf005e790a70e827cc6c0ef7f6a65587b5d2096454ebbb1b5641d003917f69639d947000000006bca7454ec7321f4012214e481539dd6c54379c5e7dd0788b9201a17d60aa5970b";
    let block = Buffer.from(blockTemplateBlob, "hex");
    const NonceBuffer = Buffer.from("7a810000", 'hex');
    let result = xmrUtil.construct_block_blob(block, NonceBuffer, 0);
    let r = Buffer.from(result, 'hex');
    let t = BlockReferenceService.convertBlock(r);
    console.log(t.toString('hex'));
    t = BlockReferenceService.hashBlock(result);
    console.log(t.toString('hex'));
    t.toString('hex').should.be.eql(powResult);

  });
})